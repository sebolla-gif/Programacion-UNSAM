1.	¬øQu√© es la base de un sistema de numeraci√≥n?
Se le llama base de un sistema de numeraci√≥n a la cantidad de s√≠mbolos distintos que hay en dicho sistema.
2.	¬øCu√°les son los 4 sistemas de numeraci√≥n / codificaci√≥n m√°s utilizados en inform√°tica / programaci√≥n?
Los cuatro sistemas m√°s usados en inform√°tica son el hexadecimal, BCD, binario y decimal.
3.	¬øCon cu√°l de los sistemas de numeraci√≥n / codificaci√≥n que respondi√≥ en la pregunta anterior cree que necesitar√° m√°s d√≠gitos para representar un valor dado? ¬øCon cu√°l menos? ¬øPor qu√©?
Con el sistema binario, dado que posee una base mas chica y se requieren m√°s d√≠gitos para representar un valor. Y el sistema con menos es el hexadecimal porque posee una base mas grande lo que le permite representar valores mas grandes con menor cantidad de d√≠gitos.
4.	¬øCu√°les son las ventajas y desventajas de los sistemas de numeraci√≥n / codificaci√≥n que mencion√≥ en las respuestas anteriores? En otras palabras, ¬øpor qu√© se usan? Responda por al menos 3 de los 4.
Sistema Binario:
Ventajas:
Simplicidad en la implementaci√≥n de circuitos digitales.
Facilita el dise√±o de l√≥gica digital.
Desventajas:
Requiere m√°s d√≠gitos para representar valores grandes.

Sistema Hexadecimal:
Ventajas:
Representa grandes valores con menos d√≠gitos.
F√°cil conversi√≥n entre binario y hexadecimal.
Desventajas:
Menos intuitivo para las personas acostumbradas al sistema decimal.

Sistema Decimal:
Ventajas:
Familiar y f√°cil de entender para la mayor√≠a de las personas.
Desventajas:
Menos eficiente para las computadoras que prefieren trabajar en binario.
Sistema BCD (Binary-Coded Decimal):
Ventajas:
Precisi√≥n en aplicaciones financieras y calculadoras.
Facilita la conversi√≥n entre binario y decimal.
Desventajas:
Menos eficiente en t√©rminos de almacenamiento comparado con binario puro.			
6. ¬øCu√°ntas magnitudes distintas se pueden representar con‚Ä¶?
a. 8 bits sin tener en cuenta el signo
b. 32 bits sin tener en cuenta el signo
c. 8 bits teniendo en cuenta el signo (se acepta respuesta con ¬± 1 de
tolerancia)
d. 32 bits teniendo en cuenta el signo (se acepta respuesta con ¬± 1 de
tolerancia)
e. N bits con signo y sin almacenar signo
f. 2 d√≠gitos hexadecimales (sin tener en cuenta el signo)
g. 8 d√≠gitos hexadecimales (sin tener en cuenta el signo)
h. N d√≠gitos hexadecimales sin signo
i. Con 8 bits usando codificaci√≥n BCD (sin signo)
a.256
b. 2 ^ 32 = 4294967296
c. Con 8 bits teniendo en cuenta el signo, se pueden representar 2^7 = 128 valores distintos para n√∫meros enteros con signo. Sin embargo, debido a que uno de los valores se reserva para representar el cero, quedan 128‚àí1=127 valores √∫nicos para representar n√∫meros enteros positivos y negativos.
d. Con 32 bits teniendo en cuenta el signo, se pueden representar 2^31= 2147483648 valores distintos para n√∫meros enteros con signo. Sin embargo, al igual que en el caso de 8 bits, uno de los valores se reserva para representar el cero, por lo que quedan 2147483648‚àí1=2147483647 valores √∫nicos para representar n√∫meros enteros positivos y negativos.
e. 2^(n-1) tomando valores √∫nicos para representar n√∫meros enteros positivos y negativos.
f. FF=15*16^1+15*16^0=255, son 256 valores con dos d√≠gitos 0-255.
g. FFFFFFFF = 15*16^7+15*16^6+15*16^5+15*16^4+15*16^3+15*16^2+15*16^1+15*16^0= 4294967295
h. 15*16^(n-1)+‚Ä¶+15*16^0
i. 1001 1001 = 99
elegir 
7. ¬øCu√°l es el valor m√°s grande que se puede representar con N bits si...? 
a. No se tiene en cuenta el signo 
b. Se tiene en cuenta el signo 
c. Si N es m√∫ltiplo de 4, no se usa signo pero se usa codificaci√≥n BCD
a. 2^(n-1)+‚Ä¶+2^(0) = 2^n
b. 2^(n-1)
c. (10^(n/4))-1 ej 8 bits  10^2 -1=99
8. a. ¬øQu√© significa la palabra unsigned en lenguaje C? 
b. ¬øC√≥mo se usa? 
c. ¬øA qu√© tipo de datos se puede aplicar? Provea 4 ejemplos. 
d. ¬øModifica el tama√±o que ocupa el tipo de datos?
a. quiere decir que la variable que estoy almacenando no posee signo.
b. se coloca detr√°s de la variable entera que se va a declarar.
c. solo se le puede aplicar a variables del tipo entero, como int, char, short, y long.
d. No, la palabra clave unsigned no modifica el tama√±o que ocupa el tipo de datos. Lo que cambia es el rango de valores que la variable puede representar.
Ejercicios de operaciones l√≥gicas a nivel bit
11. Explique el significado de los siguientes operadores en lenguaje C (en el contexto de operaciones a nivel bit): &, |, ~
11. En el lenguaje C, los operadores &, | y ~ se utilizan para realizar operaciones a nivel de bits en valores enteros. Aqu√≠ te explico el significado de cada uno de estos operadores:
El operador & realiza una operaci√≥n AND bit a bit entre dos operandos. El resultado tiene un bit en 1 solo si ambos bits correspondientes en los operandos son 1.
El operador | realiza una operaci√≥n OR bit a bit entre dos operandos. El resultado tiene un bit en 1 si al menos uno de los bits correspondientes en los operandos es 1.
El operador ~ realiza una operaci√≥n NOT bit a bit en un solo operando. Invierte todos los bits del operando, cambiando los bits de 1 a 0 y de 0 a 1.
Ejercicios de arquitecturas de hardware
14. ¬øCu√°l es la diferencia entre hardware y software?
14. La diferencia entre hardware y software radica en que el hardware es la parte f√≠sica y tangible de un sistema inform√°tico, como procesadores, memoria y dispositivos de entrada/salida, mientras que el software es la parte intangible y abstracta, compuesta por programas e instrucciones que dirigen al hardware para realizar tareas espec√≠ficas. El hardware necesita el software para ser funcional, y el software requiere hardware para ejecutarse.
15. ¬øQu√© es un dispositivo perif√©rico?
15. Un dispositivo perif√©rico es un hardware externo que se conecta a una computadora para ampliar sus capacidades y funcionalidades, permitiendo la entrada, salida, almacenamiento o comunicaci√≥n de datos. Ejemplos comunes de perif√©ricos incluyen teclados, ratones, impresoras, monitores, discos duros externos y dispositivos USB.
16. ¬øCu√°l es la caracter√≠stica fundamental de la arquitectura de Von Neumann?
16. La caracter√≠stica fundamental de la arquitectura de Von Neumann es que utiliza una √∫nica memoria para almacenar tanto las instrucciones del programa como los datos que el programa manipula. Esto significa que la CPU accede a la memoria de manera secuencial para recuperar instrucciones y datos, utilizando el mismo bus para ambas tareas, lo que simplifica el dise√±o del hardware, pero puede limitar el rendimiento debido al "cuello de botella" de la memoria.
17. ¬øQu√© es un bus y por qu√© se utiliza?
17. Un bus en el contexto de la inform√°tica es un conjunto de l√≠neas de comunicaci√≥n que se utilizan para transferir datos y se√±ales de control entre los diferentes componentes de un sistema inform√°tico, como la CPU, la memoria, los dispositivos de entrada/salida y otros dispositivos. Se utiliza para permitir la comunicaci√≥n y la transferencia de informaci√≥n de manera eficiente entre estos componentes, facilitando la interacci√≥n y el funcionamiento del sistema en su conjunto.
18. ¬øCu√°les son los buses que utiliza la arquitectura de Von Neumann?
18. La arquitectura de Von Neumann utiliza tres tipos principales de buses:

Bus de datos: Se utiliza para transferir datos entre la CPU, la memoria y los dispositivos de entrada/salida. Permite la comunicaci√≥n de los datos que la CPU necesita para ejecutar instrucciones y procesar informaci√≥n.

Bus de direcciones: Este bus se utiliza para enviar direcciones de memoria desde la CPU a la memoria principal. Permite a la CPU acceder a ubicaciones espec√≠ficas en la memoria para leer o escribir datos.

Bus de control: El bus de control se utiliza para enviar se√±ales de control y comandos entre la CPU y otros componentes del sistema, como la memoria y los dispositivos de entrada/salida. Ayuda a coordinar las operaciones del sistema y asegura que se realicen en el momento adecuado y en el orden correcto.
19.a ¬øQu√© es el per√≠odo T de una se√±al y en qu√© unidades se mide?
19.a El per√≠odo T de una se√±al peri√≥dica es el tiempo que tarda la se√±al en completar un ciclo completo de su forma de onda. Se mide en segundos (s) y representa la duraci√≥n de un ciclo de la se√±al, es decir, el tiempo entre dos puntos equivalentes en la forma de onda, como dos picos consecutivos o dos cruces por cero. El per√≠odo es el inverso de la frecuencia de la se√±al, por lo que se puede calcular como T = 1/f, donde f es la frecuencia de la se√±al en hertz (Hz).
19.b ¬øQu√© es la frecuencia f de una se√±al y en qu√© unidades se mide?
19.b La frecuencia f de una se√±al peri√≥dica es el n√∫mero de ciclos completos que la se√±al completa en un segundo. Se mide en hercios (Hz) y representa la cantidad de veces que la forma de onda se repite en un segundo. Por ejemplo, una se√±al con una frecuencia de 100 Hz completa 100 ciclos en un segundo. La frecuencia est√° relacionada con el per√≠odo T de la se√±al a trav√©s de la f√≥rmula f = 1/T, donde T es el per√≠odo en segundos.
19.c ¬øQu√© relaci√≥n matem√°tica existe entre f y T y qu√© significa?
19.c La relaci√≥n matem√°tica entre la frecuencia f y el per√≠odo T de una se√±al peri√≥dica es la siguiente:
ùëì=1/ùëá
Esto significa que la frecuencia de una se√±al es el inverso de su per√≠odo, y viceversa. En otras palabras, la frecuencia indica cu√°ntos ciclos de la se√±al ocurren en un segundo, mientras que el per√≠odo indica cu√°nto tiempo dura un ciclo completo de la se√±al. Por lo tanto, si conoces la frecuencia de una se√±al, puedes calcular su per√≠odo utilizando la f√≥rmula anterior, y si conoces el per√≠odo, puedes calcular la frecuencia utilizando la f√≥rmula inversa.
19.d ¬øCu√°l es la frecuencia de una se√±al que tiene 2ns de per√≠odo?
19.d f=1/(2√ó10‚àí9 s)= (¬Ω)√ó10^9 Hz=500MHz
20. ¬øQu√© es el clock de un sistema digital y para qu√© sirve?
20. El "clock" en un sistema digital es una se√±al peri√≥dica que oscila entre dos niveles de voltaje, representando un ciclo de trabajo regular. Este ciclo de trabajo se repite a intervalos regulares y se utiliza para sincronizar las operaciones de los componentes del sistema, asegurando que las operaciones se realicen en el momento correcto y a una velocidad adecuada.
El clock es fundamental en los sistemas digitales porque controla la velocidad a la que se ejecutan las operaciones, la transferencia de datos y la sincronizaci√≥n de todos los componentes. Sin un clock adecuado, los componentes del sistema podr√≠an funcionar de forma desincronizada, lo que podr√≠a provocar errores en las operaciones y el procesamiento de datos.
21. ¬øPara qu√© sirve el procesador o CPU?
21. El procesador, tambi√©n conocido como Unidad Central de Procesamiento (CPU), es el componente principal de un sistema inform√°tico. Sirve para realizar las operaciones y c√°lculos necesarios para ejecutar programas y procesar datos. La CPU interpreta las instrucciones de los programas, realiza operaciones aritm√©ticas y l√≥gicas, gestiona la memoria y coordina el funcionamiento de todos los componentes del sistema. En resumen, el procesador es el cerebro de la computadora y es fundamental para su funcionamiento.
22. ¬øCu√°les son los tres componentes principales de un procesador y para qu√© sirve cada uno?
22. Los tres componentes principales de un procesador son la Unidad de Control (CU), la Unidad Aritm√©tico-L√≥gica (ALU) y los Registros.

Unidad de Control (CU): La CU se encarga de coordinar y controlar las operaciones de la CPU. Interpreta las instrucciones del programa y env√≠a las se√±ales adecuadas a otros componentes para ejecutarlas. Tambi√©n controla el flujo de datos entre la CPU y la memoria, as√≠ como entre otros dispositivos.
Unidad Aritm√©tico-L√≥gica (ALU): La ALU realiza las operaciones aritm√©ticas (suma, resta, multiplicaci√≥n, divisi√≥n) y l√≥gicas (AND, OR, NOT) necesarias para procesar los datos. Es responsable de realizar c√°lculos y tomar decisiones basadas en las instrucciones del programa.
Registros: Los registros son peque√±as unidades de almacenamiento de alta velocidad que se encuentran dentro de la CPU. Se utilizan para almacenar datos temporales, direcciones de memoria y resultados de operaciones aritm√©ticas. Los registros son muy r√°pidos y permiten a la CPU acceder r√°pidamente a los datos necesarios para ejecutar las instrucciones.
23. ¬øQu√© es la RAM y qu√© significa que es de acceso aleatorio?
23. La RAM (Random Access Memory, Memoria de Acceso Aleatorio) es un tipo de memoria que se utiliza en computadoras y otros dispositivos para almacenar datos y programas de forma temporal mientras se est√°n utilizando. La RAM es "de acceso aleatorio" porque se puede acceder a cualquier ubicaci√≥n de memoria de forma directa, sin necesidad de recorrerla secuencialmente. Esto significa que la CPU puede leer o escribir en cualquier direcci√≥n de memoria de la RAM de manera casi instant√°nea, lo que la hace muy r√°pida y eficiente para realizar operaciones temporales.
24. ¬øQu√© es el tama√±o de palabra de un procesador?
24. El tama√±o de palabra de un procesador se refiere a la cantidad de bits que puede procesar en una √∫nica operaci√≥n. Por ejemplo, un procesador de 32 bits puede procesar instrucciones y datos de 32 bits de longitud en una sola operaci√≥n, mientras que un procesador de 64 bits puede procesar 64 bits en una sola operaci√≥n. El tama√±o de palabra de un procesador influye en varios aspectos de su rendimiento, como la cantidad de memoria que puede direccionar y la precisi√≥n de los c√°lculos que puede realizar.
25. En el contexto de hardware: ¬øQu√© es un n√∫cleo?
25. En el contexto de hardware, un n√∫cleo se refiere a una unidad de procesamiento independiente dentro de un procesador que puede ejecutar instrucciones y realizar c√°lculos de forma aut√≥noma. Los procesadores modernos suelen tener m√∫ltiples n√∫cleos, lo que les permite realizar varias tareas simult√°neamente, lo que se conoce como procesamiento multin√∫cleo. Cada n√∫cleo tiene su propia unidad de control, su propia unidad aritm√©tico-l√≥gica y sus propios registros, lo que le permite funcionar como un procesador completo.
